/* eslint-disable @next/next/no-img-element */
import Head from 'next/head';
import React, { useState } from 'react'
import Link from 'next/link'
import Product from '../models/Product';
const mongoose = require('mongoose');

const Ethnix = ({ products, totalProducts }) => {
    const [showFilters, setShowfilters] = useState(true);

    const [selectedColor, setSelectedColor] = useState('');
    const [selectedSize, setSelectedSize] = useState('');
    const [selectedPriceRange, setSelectedPriceRange] = useState('');
    const [sortBy, setSortBy] = useState('');

    // Function to handle color filter
    const handleColorFilter = (color) => {
        setSelectedColor(color);
    }

    // Function to handle size filter
    const handleSizeFilter = (size) => {
        setSelectedSize(size);
    }

    // Function to handle price range filter
    const handlePriceRangeFilter = (priceRange) => {
        setSelectedPriceRange(priceRange);
    }

    const handleSortHighToLow = () => {
        setSortBy('highToLow');
    }

    // Function to handle sort by price low to high
    const handleSortLowToHigh = () => {
        setSortBy('lowToHigh');
    }

    // Function to reset the sort
    const handleResetSort = () => {
        setSortBy('');
    }


    // Filter products by selected color, size and price range
    const filteredProducts = Object.values(products).filter(product => (
        (selectedColor === '' || product.color.includes(selectedColor))
        && (selectedSize === '' || product.size.includes(selectedSize))
        && (selectedPriceRange === ''
            || (product.price >= selectedPriceRange.min && product.price <= selectedPriceRange.max))
    ));


    let sortedProducts = filteredProducts;
    if (sortBy === 'highToLow') {
        sortedProducts = filteredProducts.sort((a, b) => b.price - a.price);
    } else if (sortBy === 'lowToHigh') {
        sortedProducts = filteredProducts.sort((a, b) => a.price - b.price);
    }
    // Function to generate the price range options
    const getPriceRangeOptions = () => {
        return [
            { label: '₹100 - ₹300', value: { min: 100, max: 300 } },
            { label: '₹300 - ₹500', value: { min: 300, max: 500 } },
            { label: '₹500 - ₹1000', value: { min: 500, max: 1000 } },
            { label: '₹1000 - ₹1500', value: { min: 1000, max: 1500 } },
            { label: '₹1500 - ₹2000', value: { min: 1500, max: 2000 } },
            { label: 'Over ₹2000', value: { min: 2000, max: 10000 } },
        ];
    }




    return (
        <div>

            <Head>
                <title>StyleOn.com - Ethnix</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <section className="text-black body-font ">
                <div className=" md:py-12 lg:px-20 md:px-6 py-9 px-4">
                    <p className=" text-sm leading-3 text-gray-600 font-normal mb-2">Home / Ethnix</p>
                    <div className=" flex justify-between items-center mb-4">
                        <h2 className=" lg:text-4xl text-3xl lg:leading-9 leading-7 text-gray-800 font-semibold">Ethnix</h2>

                        {/*  filters Button (md and plus Screen) */}

                        <div className="container px-5 mx-auto">
                            <div className="flex justify-between">
                                <div>

                                </div>
                                <div>
                                    <select className="px-4 py-2 border rounded-md" value={selectedPriceRange} onChange={(e) => handlePriceRangeFilter(JSON.parse(e.target.value))}>
                                        {getPriceRangeOptions().map(option => (
                                            <option key={option.label} value={JSON.stringify(option.value)} placeholder={option.label}>{option.label}</option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <button onClick={() => setShowfilters(!showFilters)} className=" cursor-pointer sm:flex hidden hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-gray-800 py-4 px-6 bg-[#111] text-base leading-4 font-normal text-white justify-center items-center rounded-md">
                            <svg className=" mr-2" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M6 12C7.10457 12 8 11.1046 8 10C8 8.89543 7.10457 8 6 8C4.89543 8 4 8.89543 4 10C4 11.1046 4.89543 12 6 12Z" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M6 4V8" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M6 12V20" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M12 18C13.1046 18 14 17.1046 14 16C14 14.8954 13.1046 14 12 14C10.8954 14 10 14.8954 10 16C10 17.1046 10.8954 18 12 18Z" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M12 4V14" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M12 18V20" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M18 9C19.1046 9 20 8.10457 20 7C20 5.89543 19.1046 5 18 5C16.8954 5 16 5.89543 16 7C16 8.10457 16.8954 9 18 9Z" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M18 4V5" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M18 9V20" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                            Filters
                        </button>

                    </div>
                    <p className=" text-xl leading-5 text-gray-600 font-medium">{totalProducts} Ethnix</p>

                    {/* Filters Button (Small Screen)  */}

                    <button onClick={() => setShowfilters(!showFilters)} className="cursor-pointer mt-6 block sm:hidden hover:bg-gray-700 focus:ring-2 focus:ring-offset-2 focus:ring-gray-800 w-full bg-[#111] text-base leading-4 font-normal text-white justify-center items-center rounded-md py-3 px-2 mb-2">

                        Filters
                    </button>
                </div>

                

                <div id="filterSection" className={"relative md:py-10 lg:px-20 md:px-6 py-9 px-4 bg-slate-100 w-full " + (showFilters ? "hidden" : "block")}>
                    {/* Cross button Code  */}
                    <div onClick={() => setShowfilters(true)} className=" cursor-pointer absolute right-0 top-0 md:py-10 lg:px-20 md:px-6 py-9 px-4">
                        <svg className=" lg:w-6 lg:h-6 w-4 h-4" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M25 1L1 25" stroke="#1F2937" strokeWidth="1.25" strokeLinecap="round" strokeLinejoin="round" />
                            <path d="M1 1L25 25" stroke="#27272A" strokeWidth="1.25" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                    </div>

                    <div className='mt-1 mb-5'>
                        <p className='text-3xl font-bold py-3'>Size</p>
                        <button className={`border border-gray-300 px-1 mx-1 rounded-md text-xl hover:border-black ${selectedSize === '' && 'bg-gray-200 border-gray-900'}`} onClick={() => handleSizeFilter('')}>All</button>
                        <button className={`border border-gray-300 px-1 mx-1 rounded-md text-xl hover:border-black ${selectedSize === 'S' && 'bg-gray-200 border-gray-900'}`} onClick={() => handleSizeFilter('S')}>S</button>
                        <button className={`border border-gray-300 px-1 mx-1 rounded-md text-xl hover:border-black ${selectedSize === 'M' && 'bg-gray-200 border-gray-900'}`} onClick={() => handleSizeFilter('M')}>M</button>
                        <button className={`border border-gray-300 px-1 mx-1 rounded-md text-xl hover:border-black ${selectedSize === 'L' && 'bg-gray-200 border-gray-900'}`} onClick={() => handleSizeFilter('L')}>L</button>
                        <button className={`border border-gray-300 px-1 mx-1 rounded-md text-xl hover:border-black ${selectedSize === 'XL' && 'bg-gray-200 border-gray-900'}`} onClick={() => handleSizeFilter('XL')}>XL</button>
                        <button className={`border border-gray-300 px-1 mx-1 rounded-md text-xl hover:border-black ${selectedSize === 'XXL' && 'bg-gray-200 border-gray-900'}`} onClick={() => handleSizeFilter('XXL')}>XXL</button>
                    </div>


                    <div className='mt-1 mb-5'>
                        <p className='text-3xl font-bold py-3'>Color</p>
                        <button className={`border  w-8  h-8 bg-gradient-to-r from-green-400 to-blue-500 hover:from-pink-500 hover:to-yellow-500 rounded-full px-1 mx-1 ${selectedColor === '' && 'scale-125'}`} onClick={() => handleSizeFilter('')}></button>
                       
                        <button className={`border border-gray-300 w-8  h-8 bg-black rounded-full px-1 mx-1 ${selectedColor === 'Black' && 'scale-125'}`} onClick={() => handleColorFilter('Black')}></button>
                        <button className={`border border-gray-300 w-8  h-8 bg-white rounded-full px-1 mx-1 ${selectedColor === 'White' && ' scale-125'}`} onClick={() => handleColorFilter('White')}></button>
                        <button className={`border border-gray-300 w-8  h-8  bg-blue-600 rounded-full px-1 mx-1 ${selectedColor === 'Blue' && ' scale-125'}`} onClick={() => handleColorFilter('Blue')}></button>
                        <button className={`border border-gray-300 w-8  h-8 bg-red-500  rounded-full px-1 mx-1 ${selectedColor === 'Red' && 'scale-125'}`} onClick={() => handleColorFilter('Red')}></button>
                        
                    </div>

                    

                   

                    <div className="mt-1">
                    <p className='text-3xl font-bold py-3'>SortBy</p>
                        

                        <button className={`border border-gray-200 px-1 mx-1 ${sortBy === 'highToLow' && 'border-gray-900 rounded-md'}`}  onClick={() => handleSortHighToLow()}>
                            Price High to Low
                        </button>

                        <button  className={`border border-gray-200 px-1 mx-1 ${sortBy === 'lowToHigh' && 'border-gray-900 rounded-md'}`} onClick={() => handleSortLowToHigh()}>
                            Price Low to High
                        </button>
                        <button className={`border border-gray-200 px-1 mx-1 ${sortBy === '' && 'border-gray-900 rounded-md'}`} onClick={() => handleResetSort()}>
                            Reset Sort
                        </button>
                    </div>









                    






                    
                </div>



                <div className="container px-5 py-24 mx-auto">
                    <div className="flex flex-wrap -m-4 justify-center">

                        {Object.keys(sortedProducts).map((item) => {

                            return <Link passHref={true} key={sortedProducts[item]._id} href={`/product/${sortedProducts[item].slug}`} legacyBehavior>
                                <div className="lg:w-1/4 md:w-1/2 p-4 w-full border rounded-md cursor-pointer shadow-lg m-5 hover:shadow-2xl hover:scale-105">
                                    <a className="block relative rounded overflow-hidden">
                                        <img alt="ecommerce" className="m-auto block h-[50vh] w-[80vh]" src={sortedProducts[item].img} />
                                    </a>
                                    <div className="mt-4 text-center md:text-left">
                                        <h3 className="text-gray-500 text-xs tracking-widest title-font mb-1">
                                            {sortedProducts[item].category}
                                        </h3>
                                        <h2 className="text-gray-900 title-font text-md font-medium">{sortedProducts[item].title}</h2>
                                    </div>

                                    <div className='mt-1'>
                                        {sortedProducts[item].color.includes("White") && <button className="inline-flex items-center justify-center p-1">
                                            <div className="w-4 h-4 rounded-full bg-white border border-gray-400"></div>
                                        </button>}
                                        {sortedProducts[item].color.includes("Red") && <button className="inline-flex items-center justify-center p-1">
                                            <div className="w-4 h-4 rounded-full bg-red-500"></div>
                                        </button>}
                                        {sortedProducts[item].color.includes("Black") && <button className="inline-flex items-center justify-center p-1 ">
                                            <div className="w-4 h-4 rounded-full bg-black"></div>
                                        </button>}
                                        {sortedProducts[item].color.includes("Blue") && <button className="inline-flex items-center justify-center p-1 ">
                                            <div className="w-4 h-4 rounded-full bg-blue-600"></div>
                                        </button>}
                                        {sortedProducts[item].color.includes("Green") && <button className="inline-flex items-center justify-center p-1 ">
                                            <div className="w-4 h-4 rounded-full bg-green-600"></div>
                                        </button>}
                                        {sortedProducts[item].color.includes("Yellow") && <button className="inline-flex items-center justify-center p-1 ">
                                            <div className="w-4 h-4 rounded-full bg-yellow-400"></div>
                                        </button>}
                                    </div>

                                    <div className='mt-1'>
                                        {sortedProducts[item].size.includes("S") && <span className='border border-gray-300 px-1 mx-1'>S</span>}
                                        {sortedProducts[item].size.includes("M") && <span className='border border-gray-300 px-1 mx-1'>M</span>}
                                        {sortedProducts[item].size.includes("L") && <span className='border border-gray-300 px-1 mx-1'>L</span>}
                                        {sortedProducts[item].size.includes("XL") && <span className='border border-gray-300 px-1 mx-1'>XL</span>}
                                        {sortedProducts[item].size.includes("XXL") && <span className='border border-gray-300 px-1 mx-1'>XXL</span>}
                                        {sortedProducts[item].size.includes("XXXL") && <span className='border border-gray-300 px-1 mx-1'>XXXL</span>}
                                        {sortedProducts[item].size.includes("XXXXL") && <span className='border border-gray-300 px-1 mx-1'>XXXXL</span>}
                                        {sortedProducts[item].size.includes("XXXXXL") && <span className='border border-gray-300 px-1 mx-1'>XXXXXL</span>}
                                    </div>



                                    <div className='mt-1 text-right text-md font-bold text-black'>
                                        <p>₹{sortedProducts[item].price}</p>
                                    </div>

                                </div>
                            </Link>
                        })}




                    </div>


                </div>
            </section>

        </div>
    )
}



export async function getServerSideProps(context) {
  if (!mongoose.connections[0].readyState) {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      family: 4,
    })
  }
  let products = await Product.find({ category: "Ethnix" })
  
  
  let totalProducts = await Product.find({ category: "Ethnix" }).count();
  let bundi = {}
  for (let item of products) {
    if (item.title in bundi) {
      if (!bundi[item.title].color.includes(item.color) && item.avialableQty > 0) {
        bundi[item.title].color.push(item.color)
      }
      if (!bundi[item.title].size.includes(item.size) && item.avialableQty > 0) {
        bundi[item.title].size.push(item.size)
      }
    } else {
      bundi[item.title] = JSON.parse(JSON.stringify(item))
      if (item.avialableQty > 0) {
        bundi[item.title].color = [item.color]
        bundi[item.title].size = [item.size]
      } else {
        bundi[item.title].color = []
        bundi[item.title].size = []
      }
    }
  }
  return {
    props: { products: JSON.parse(JSON.stringify(bundi)), totalProducts: JSON.parse(JSON.stringify(totalProducts)) }, // will be passed to the page component as props
  }
}

export default Ethnix